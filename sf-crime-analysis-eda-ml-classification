{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":4458,"databundleVersionId":34321,"sourceType":"competition"}],"dockerImageVersionId":30746,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","execution":{"iopub.status.busy":"2024-08-04T12:26:44.925243Z","iopub.execute_input":"2024-08-04T12:26:44.925759Z","iopub.status.idle":"2024-08-04T12:26:44.937989Z","shell.execute_reply.started":"2024-08-04T12:26:44.925719Z","shell.execute_reply":"2024-08-04T12:26:44.936451Z"},"trusted":true},"execution_count":28,"outputs":[{"name":"stdout","text":"/kaggle/input/sf-crime/train.csv.zip\n/kaggle/input/sf-crime/sampleSubmission.csv.zip\n/kaggle/input/sf-crime/test.csv.zip\n","output_type":"stream"}]},{"cell_type":"markdown","source":"# **Reading datasets from kaggle folder**","metadata":{}},{"cell_type":"code","source":"import zipfile\nimport pandas as pd\n\nz1 = zipfile.ZipFile('/kaggle/input/sf-crime/train.csv.zip')\nz2 = zipfile.ZipFile('/kaggle/input/sf-crime/test.csv.zip')\n\ntrain = pd.read_csv(z1.open('train.csv'), parse_dates=['Dates'])\ntest = pd.read_csv(z2.open('test.csv'), parse_dates=['Dates'])","metadata":{"execution":{"iopub.status.busy":"2024-08-04T12:26:44.940626Z","iopub.execute_input":"2024-08-04T12:26:44.941121Z","iopub.status.idle":"2024-08-04T12:26:51.344508Z","shell.execute_reply.started":"2024-08-04T12:26:44.941076Z","shell.execute_reply":"2024-08-04T12:26:51.343033Z"},"trusted":true},"execution_count":29,"outputs":[]},{"cell_type":"markdown","source":"# **Step 1.1: Dataset inspection:** ","metadata":{}},{"cell_type":"code","source":"train.head()","metadata":{"execution":{"iopub.status.busy":"2024-08-04T12:26:51.346271Z","iopub.execute_input":"2024-08-04T12:26:51.346668Z","iopub.status.idle":"2024-08-04T12:26:51.365122Z","shell.execute_reply.started":"2024-08-04T12:26:51.346635Z","shell.execute_reply":"2024-08-04T12:26:51.363895Z"},"trusted":true},"execution_count":30,"outputs":[{"execution_count":30,"output_type":"execute_result","data":{"text/plain":"                Dates        Category                      Descript  \\\n0 2015-05-13 23:53:00        WARRANTS                WARRANT ARREST   \n1 2015-05-13 23:53:00  OTHER OFFENSES      TRAFFIC VIOLATION ARREST   \n2 2015-05-13 23:33:00  OTHER OFFENSES      TRAFFIC VIOLATION ARREST   \n3 2015-05-13 23:30:00   LARCENY/THEFT  GRAND THEFT FROM LOCKED AUTO   \n4 2015-05-13 23:30:00   LARCENY/THEFT  GRAND THEFT FROM LOCKED AUTO   \n\n   DayOfWeek PdDistrict      Resolution                    Address  \\\n0  Wednesday   NORTHERN  ARREST, BOOKED         OAK ST / LAGUNA ST   \n1  Wednesday   NORTHERN  ARREST, BOOKED         OAK ST / LAGUNA ST   \n2  Wednesday   NORTHERN  ARREST, BOOKED  VANNESS AV / GREENWICH ST   \n3  Wednesday   NORTHERN            NONE   1500 Block of LOMBARD ST   \n4  Wednesday       PARK            NONE  100 Block of BRODERICK ST   \n\n            X          Y  \n0 -122.425892  37.774599  \n1 -122.425892  37.774599  \n2 -122.424363  37.800414  \n3 -122.426995  37.800873  \n4 -122.438738  37.771541  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Dates</th>\n      <th>Category</th>\n      <th>Descript</th>\n      <th>DayOfWeek</th>\n      <th>PdDistrict</th>\n      <th>Resolution</th>\n      <th>Address</th>\n      <th>X</th>\n      <th>Y</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>2015-05-13 23:53:00</td>\n      <td>WARRANTS</td>\n      <td>WARRANT ARREST</td>\n      <td>Wednesday</td>\n      <td>NORTHERN</td>\n      <td>ARREST, BOOKED</td>\n      <td>OAK ST / LAGUNA ST</td>\n      <td>-122.425892</td>\n      <td>37.774599</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2015-05-13 23:53:00</td>\n      <td>OTHER OFFENSES</td>\n      <td>TRAFFIC VIOLATION ARREST</td>\n      <td>Wednesday</td>\n      <td>NORTHERN</td>\n      <td>ARREST, BOOKED</td>\n      <td>OAK ST / LAGUNA ST</td>\n      <td>-122.425892</td>\n      <td>37.774599</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>2015-05-13 23:33:00</td>\n      <td>OTHER OFFENSES</td>\n      <td>TRAFFIC VIOLATION ARREST</td>\n      <td>Wednesday</td>\n      <td>NORTHERN</td>\n      <td>ARREST, BOOKED</td>\n      <td>VANNESS AV / GREENWICH ST</td>\n      <td>-122.424363</td>\n      <td>37.800414</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>2015-05-13 23:30:00</td>\n      <td>LARCENY/THEFT</td>\n      <td>GRAND THEFT FROM LOCKED AUTO</td>\n      <td>Wednesday</td>\n      <td>NORTHERN</td>\n      <td>NONE</td>\n      <td>1500 Block of LOMBARD ST</td>\n      <td>-122.426995</td>\n      <td>37.800873</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>2015-05-13 23:30:00</td>\n      <td>LARCENY/THEFT</td>\n      <td>GRAND THEFT FROM LOCKED AUTO</td>\n      <td>Wednesday</td>\n      <td>PARK</td>\n      <td>NONE</td>\n      <td>100 Block of BRODERICK ST</td>\n      <td>-122.438738</td>\n      <td>37.771541</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"markdown","source":"# Step 1.2: Finding # of columns and rows\n","metadata":{}},{"cell_type":"code","source":"train.shape","metadata":{"execution":{"iopub.status.busy":"2024-08-04T12:26:51.368636Z","iopub.execute_input":"2024-08-04T12:26:51.369063Z","iopub.status.idle":"2024-08-04T12:26:51.377409Z","shell.execute_reply.started":"2024-08-04T12:26:51.369015Z","shell.execute_reply":"2024-08-04T12:26:51.376169Z"},"trusted":true},"execution_count":31,"outputs":[{"execution_count":31,"output_type":"execute_result","data":{"text/plain":"(878049, 9)"},"metadata":{}}]},{"cell_type":"markdown","source":"# Step 1.3: Finding type and null counts","metadata":{}},{"cell_type":"code","source":"train.info()","metadata":{"execution":{"iopub.status.busy":"2024-08-04T12:26:51.379274Z","iopub.execute_input":"2024-08-04T12:26:51.379641Z","iopub.status.idle":"2024-08-04T12:26:51.983328Z","shell.execute_reply.started":"2024-08-04T12:26:51.379607Z","shell.execute_reply":"2024-08-04T12:26:51.982160Z"},"trusted":true},"execution_count":32,"outputs":[{"name":"stdout","text":"<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 878049 entries, 0 to 878048\nData columns (total 9 columns):\n #   Column      Non-Null Count   Dtype         \n---  ------      --------------   -----         \n 0   Dates       878049 non-null  datetime64[ns]\n 1   Category    878049 non-null  object        \n 2   Descript    878049 non-null  object        \n 3   DayOfWeek   878049 non-null  object        \n 4   PdDistrict  878049 non-null  object        \n 5   Resolution  878049 non-null  object        \n 6   Address     878049 non-null  object        \n 7   X           878049 non-null  float64       \n 8   Y           878049 non-null  float64       \ndtypes: datetime64[ns](1), float64(2), object(6)\nmemory usage: 60.3+ MB\n","output_type":"stream"}]},{"cell_type":"markdown","source":"# Step 1.4: Finding Statistical Summary:","metadata":{}},{"cell_type":"code","source":"train.describe()","metadata":{"execution":{"iopub.status.busy":"2024-08-04T12:26:51.984585Z","iopub.execute_input":"2024-08-04T12:26:51.984913Z","iopub.status.idle":"2024-08-04T12:26:52.128774Z","shell.execute_reply.started":"2024-08-04T12:26:51.984885Z","shell.execute_reply":"2024-08-04T12:26:52.127674Z"},"trusted":true},"execution_count":33,"outputs":[{"execution_count":33,"output_type":"execute_result","data":{"text/plain":"                               Dates              X              Y\ncount                         878049  878049.000000  878049.000000\nmean   2009-03-16 08:25:41.991847168    -122.422616      37.771020\nmin              2003-01-06 00:01:00    -122.513642      37.707879\n25%              2006-01-11 03:00:00    -122.432952      37.752427\n50%              2009-03-07 16:00:00    -122.416420      37.775421\n75%              2012-06-11 10:13:00    -122.406959      37.784369\nmax              2015-05-13 23:53:00    -120.500000      90.000000\nstd                              NaN       0.030354       0.456893","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Dates</th>\n      <th>X</th>\n      <th>Y</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>count</th>\n      <td>878049</td>\n      <td>878049.000000</td>\n      <td>878049.000000</td>\n    </tr>\n    <tr>\n      <th>mean</th>\n      <td>2009-03-16 08:25:41.991847168</td>\n      <td>-122.422616</td>\n      <td>37.771020</td>\n    </tr>\n    <tr>\n      <th>min</th>\n      <td>2003-01-06 00:01:00</td>\n      <td>-122.513642</td>\n      <td>37.707879</td>\n    </tr>\n    <tr>\n      <th>25%</th>\n      <td>2006-01-11 03:00:00</td>\n      <td>-122.432952</td>\n      <td>37.752427</td>\n    </tr>\n    <tr>\n      <th>50%</th>\n      <td>2009-03-07 16:00:00</td>\n      <td>-122.416420</td>\n      <td>37.775421</td>\n    </tr>\n    <tr>\n      <th>75%</th>\n      <td>2012-06-11 10:13:00</td>\n      <td>-122.406959</td>\n      <td>37.784369</td>\n    </tr>\n    <tr>\n      <th>max</th>\n      <td>2015-05-13 23:53:00</td>\n      <td>-120.500000</td>\n      <td>90.000000</td>\n    </tr>\n    <tr>\n      <th>std</th>\n      <td>NaN</td>\n      <td>0.030354</td>\n      <td>0.456893</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"# Verify feature sets\nprint(\"Train columns:\", train.columns.sort_values())\nprint(\"Test columns:\", test.columns.sort_values())","metadata":{"execution":{"iopub.status.busy":"2024-08-04T12:26:52.130530Z","iopub.execute_input":"2024-08-04T12:26:52.130903Z","iopub.status.idle":"2024-08-04T12:26:52.137990Z","shell.execute_reply.started":"2024-08-04T12:26:52.130872Z","shell.execute_reply":"2024-08-04T12:26:52.136759Z"},"trusted":true},"execution_count":34,"outputs":[{"name":"stdout","text":"Train columns: Index(['Address', 'Category', 'Dates', 'DayOfWeek', 'Descript', 'PdDistrict',\n       'Resolution', 'X', 'Y'],\n      dtype='object')\nTest columns: Index(['Address', 'Dates', 'DayOfWeek', 'Id', 'PdDistrict', 'X', 'Y'], dtype='object')\n","output_type":"stream"}]},{"cell_type":"markdown","source":"# Step 2: Data cleaning\n\n# Step 2.1: Find missing values","metadata":{}},{"cell_type":"code","source":"train.isna().sum()","metadata":{"execution":{"iopub.status.busy":"2024-08-04T12:26:52.139304Z","iopub.execute_input":"2024-08-04T12:26:52.139620Z","iopub.status.idle":"2024-08-04T12:26:52.717348Z","shell.execute_reply.started":"2024-08-04T12:26:52.139592Z","shell.execute_reply":"2024-08-04T12:26:52.716152Z"},"trusted":true},"execution_count":35,"outputs":[{"execution_count":35,"output_type":"execute_result","data":{"text/plain":"Dates         0\nCategory      0\nDescript      0\nDayOfWeek     0\nPdDistrict    0\nResolution    0\nAddress       0\nX             0\nY             0\ndtype: int64"},"metadata":{}}]},{"cell_type":"markdown","source":"# Step 2.2: Find # of duplicates and remove Exact duplicates","metadata":{}},{"cell_type":"code","source":"print(\"Dataset count before removing duplicates: \", train.duplicated().sum())\ntrain.drop_duplicates(inplace=True)\nprint(\"Dataset count after removing duplicates: \", train.duplicated().sum())","metadata":{"execution":{"iopub.status.busy":"2024-08-04T12:26:52.718783Z","iopub.execute_input":"2024-08-04T12:26:52.719223Z","iopub.status.idle":"2024-08-04T12:26:55.134921Z","shell.execute_reply.started":"2024-08-04T12:26:52.719182Z","shell.execute_reply":"2024-08-04T12:26:55.133822Z"},"trusted":true},"execution_count":36,"outputs":[{"name":"stdout","text":"Dataset count before removing duplicates:  2323\nDataset count after removing duplicates:  0\n","output_type":"stream"}]},{"cell_type":"markdown","source":"# Step 2.3: Outlier Analysis - Visualization & Finding outlier counts","metadata":{}},{"cell_type":"code","source":"import matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Boxplot for X (Longitude)\nplt.figure(figsize=(12, 6))\nsns.boxplot(x=train['X'])\nplt.title('Boxplot for Longitude (X)')\nplt.show()\n\n# Boxplot for Y (Latitude)\nplt.figure(figsize=(12, 6))\nsns.boxplot(x=train['Y'])\nplt.title('Boxplot for Latitude (Y)')\nplt.show()\n\n# Histogram for X (Longitude)\nplt.figure(figsize=(12, 6))\nsns.histplot(train['X'], bins=50, kde=True)\nplt.title('Histogram for Longitude (X)')\nplt.show()\n\n# Histogram for Y (Latitude)\nplt.figure(figsize=(12, 6))\nsns.histplot(train['Y'], bins=50, kde=True)\nplt.title('Histogram for Latitude (Y)')\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-08-04T12:26:55.138657Z","iopub.execute_input":"2024-08-04T12:26:55.139097Z","iopub.status.idle":"2024-08-04T12:27:04.708194Z","shell.execute_reply.started":"2024-08-04T12:26:55.139065Z","shell.execute_reply":"2024-08-04T12:27:04.706726Z"},"trusted":true},"execution_count":37,"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 1200x600 with 1 Axes>","image/png":""},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<Figure size 1200x600 with 1 Axes>","image/png":""},"metadata":{}},{"name":"stderr","text":"/opt/conda/lib/python3.10/site-packages/seaborn/_oldcore.py:1119: FutureWarning: use_inf_as_na option is deprecated and will be removed in a future version. Convert inf values to NaN before operating instead.\n  with pd.option_context('mode.use_inf_as_na', True):\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<Figure size 1200x600 with 1 Axes>","image/png":""},"metadata":{}},{"name":"stderr","text":"/opt/conda/lib/python3.10/site-packages/seaborn/_oldcore.py:1119: FutureWarning: use_inf_as_na option is deprecated and will be removed in a future version. Convert inf values to NaN before operating instead.\n  with pd.option_context('mode.use_inf_as_na', True):\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<Figure size 1200x600 with 1 Axes>","image/png":""},"metadata":{}}]},{"cell_type":"code","source":"Q1_X = train['X'].quantile(0.25)\nQ2_X = train['X'].quantile(0.50)\nQ3_X = train['X'].quantile(0.75)\n\nIQR_X = Q3_X-Q1_X\n\nprint(IQR_X)\n\nQ1_Y = train['Y'].quantile(0.25)\nQ2_Y = train['Y'].quantile(0.50)\nQ3_Y = train['Y'].quantile(0.75)\n\nIQR_Y = Q3_Y-Q1_Y\n\nprint(IQR_Y)\n\n# Outlier removal\noutliers_X = train[~((train['X']<(Q1_X-(1.5*IQR_X))) | (train['X']>(Q3_X+(1.5*IQR_X))))]\n\noutliers_Y = train[~((train['Y']<(Q1_Y-(1.5*IQR_Y))) | (train['Y']>(Q3_Y+(1.5*IQR_Y))))]\n\nprint(len(outliers_X))\nprint(len(outliers_Y))","metadata":{"execution":{"iopub.status.busy":"2024-08-04T12:27:04.709694Z","iopub.execute_input":"2024-08-04T12:27:04.710153Z","iopub.status.idle":"2024-08-04T12:27:05.051816Z","shell.execute_reply.started":"2024-08-04T12:27:04.710119Z","shell.execute_reply":"2024-08-04T12:27:05.050578Z"},"trusted":true},"execution_count":38,"outputs":[{"name":"stdout","text":"0.025992929307989243\n0.031952515976996665\n815600\n875659\n","output_type":"stream"}]},{"cell_type":"code","source":"# Verify feature sets\nprint(\"Train columns:\", train.columns.sort_values())\nprint(\"Test columns:\", test.columns.sort_values())","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# Step 3: Univariate analysis:\n\n## Bar Plots/Pie charts for Categorical data\n## Histograms for Numerical data","metadata":{}},{"cell_type":"code","source":"# Bar chart to see distribution of Crime by Category\n\nplt.figure(figsize=(14, 8))\ntrain['Category'].value_counts().plot(kind='bar')\nplt.title('Bar plot of Crime Category')\nplt.xlabel('Category')\nplt.ylabel('Frequency')\nplt.show()","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Bar Plot for Day of the Week\nplt.figure(figsize=(10, 6))\ntrain['DayOfWeek'].value_counts().plot(kind='bar')\nplt.title('Bar Plot of Day of the Week')\nplt.xlabel('Day of the Week')\nplt.ylabel('Frequency')\nplt.xticks(rotation=0)\nplt.show()","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Bar Plot for Police District\nplt.figure(figsize=(12, 6))\ntrain['PdDistrict'].value_counts().plot(kind='bar')\nplt.title('Bar Plot of Police District')\nplt.xlabel('Police District')\nplt.ylabel('Frequency')\nplt.xticks(rotation=45)\nplt.show()","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Bar Plot for Resolution\nplt.figure(figsize=(14, 8))\ntrain['Resolution'].value_counts().plot(kind='bar')\nplt.title('Bar Plot of Resolution')\nplt.xlabel('Resolution')\nplt.ylabel('Frequency')\nplt.xticks(rotation=90)\nplt.show()","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# Step 4: Performing Bivariate analysis:","metadata":{}},{"cell_type":"code","source":"import folium\nfrom folium.plugins import HeatMap\nfrom IPython.display import IFrame\n\n# Initialize the map centered around San Francisco\nsf_map = folium.Map(location=[37.77, -122.42], zoom_start=12)\n\n# Add a heatmap to the map using a sample of the data\nheat_data = [[row['Y'], row['X']] for index, row in train.sample(n=10000, random_state=42).iterrows()]\n\nHeatMap(heat_data, radius=10, max_zoom=13).add_to(sf_map)\n\n# Save the map to an HTML file\nsf_map_path = 'sf_crime_heatmap_sample.html'\nsf_map.save(sf_map_path)\n\n# Display the map in the notebook\nIFrame(sf_map_path, width=700, height=500)","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Plot a bar plot for Category vs DayOfWeek\nplt.figure(figsize=(12, 8))\nsns.countplot(data=train, x='DayOfWeek', hue='Category')\nplt.title('Crime Category by Day of the Week')\nplt.xticks(rotation=45)\nplt.show()","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Plot a bar plot for Category vs PdDistrict\nplt.figure(figsize=(12, 8))\nsns.countplot(data=train, x='PdDistrict', hue='Category')\nplt.title('Crime Category by Police District')\nplt.xticks(rotation=45)\nplt.show()","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Verify feature sets\nprint(\"Train columns:\", train.columns.sort_values())\nprint(\"Test columns:\", test.columns.sort_values())","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# Step 5: Multivariate analysis","metadata":{}},{"cell_type":"code","source":"import numpy as np\n\n# Convert Dates to datetime\ntrain['Dates'] = pd.to_datetime(train['Dates'])\n\n# Extract date features\ntrain['Year'] = train['Dates'].dt.year\ntrain['Month'] = train['Dates'].dt.month\ntrain['Day'] = train['Dates'].dt.day\ntrain['Hour'] = train['Dates'].dt.hour\n\n# Compute correlation matrix\ncorr_matrix = train[['Year', 'Month', 'Day', 'Hour', 'X', 'Y']].corr()\n\nmask = np.triu(np.ones_like(corr_matrix, dtype=bool))\n\n# Plot heatmap\nplt.figure(figsize=(10, 6))\nsns.heatmap(corr_matrix, mask=mask, annot=True, cmap='coolwarm')\nplt.title('Correlation Matrix')\nplt.show()","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Verify feature sets\nprint(\"Train columns:\", train.columns.sort_values())\nprint(\"Test columns:\", test.columns.sort_values())","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# Step 6: Feature Engineering","metadata":{}},{"cell_type":"code","source":"def feature_engineering(data):\n    data['Date'] = pd.to_datetime(data['Dates'].dt.date)\n    data['n_days'] = (data['Date'] - data['Date'].min()).apply(lambda x: x.days)\n    data['Day'] = data['Dates'].dt.day\n    data['DayOfWeek'] = data['Dates'].dt.weekday\n    data['Month'] = data['Dates'].dt.month\n    data['Year'] = data['Dates'].dt.year\n    data['Hour'] = data['Dates'].dt.hour\n    data['Minute'] = data['Dates'].dt.minute\n    \n    # Make a new feature that contains true if addresses contain 'block'.\n    data['Block'] = data['Address'].str.contains('block', case=False)\n    \n    # Combining numerical data into 1 like this gets us better results\n    data[\"X_Y\"] = data[\"X\"] - data[\"Y\"]\n    data[\"XY\"] = data[\"X\"] + data[\"Y\"]\n    data.drop(columns=['Dates','Date','Address'], inplace=True)\n        \n    return data\n\ntrain = feature_engineering(train)\ntrain.drop(columns=['Descript','Resolution'], inplace=True)\ntest = feature_engineering(test)\ntest.drop(columns=['Id'], inplace=True)\ntrain.head()","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Verify feature sets\nprint(\"Train columns:\", train.columns.sort_values())\nprint(\"Test columns:\", test.columns.sort_values())","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# Step 7: Building the LGBM Classifier model on the processed dataset to classify Category of Crime","metadata":{}},{"cell_type":"code","source":"from sklearn.preprocessing import LabelEncoder\nimport lightgbm as lgb\n\nle1 = LabelEncoder()\ntrain['PdDistrict'] = le1.fit_transform(train['PdDistrict'])\ntest['PdDistrict'] = le1.transform(test['PdDistrict'])\n\nle2 = LabelEncoder()\nX = train.drop(columns=['Category'])\ny = le2.fit_transform(train['Category'])\n\ntrain_data = lgb.Dataset(X, label=y, categorical_feature=['PdDistrict', ])\nparams = {'boosting':'gbdt',\n          'objective':'multiclass',\n          'num_class':39,\n          'max_delta_step':0.9,\n          'min_data_in_leaf': 21,\n          'learning_rate': 0.4,\n          'max_bin': 465,\n          'num_leaves': 41,\n          'verbose' : 1}\n\nbst = lgb.train(params, train_data, 120)\npredictions = bst.predict(test)\n\nsubmission = pd.DataFrame(predictions, columns=le2.inverse_transform(np.linspace(0, 38, 39, dtype='int16')), index=test.index)\nsubmission.to_csv('submission.csv', index_label='Id')","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# Step 8: Determining Feature Importance","metadata":{}},{"cell_type":"code","source":"import matplotlib.pyplot as plt\n\n# Plot feature importances using the 'gain' metric\nfig, ax = plt.subplots(figsize=(12, 8))\nlgb.plot_importance(bst, max_num_features=20, importance_type='gain', ax=ax)\nplt.title('Feature Importance (Gain)')\nplt.show()\n\n# Plot feature importances using the 'split' metric\nfig, ax = plt.subplots(figsize=(12, 8))\nlgb.plot_importance(bst, max_num_features=20, importance_type='split', ax=ax)\nplt.title('Feature Importance (Split)')\nplt.show()","metadata":{"trusted":true},"execution_count":null,"outputs":[]}]}